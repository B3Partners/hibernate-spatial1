<?xml version="1.0" encoding="UTF-8"?>

<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<body>
		<section
			name="Automated integration testing of the Hibernate Spatial DAO layer with Spring and GeoDB" >

		<p>
			At
			<a href="http://www.geodan.com">Geodan</a>
			we recently started to use automated integration tests to test the
			Hibernate DAO layer of our applications. Open source GIS applications usually
			use PostGIS as backend, which is not very practical in automated
			tests. We needed a geospatial database that could be setup in our
			JUnit tests. GeoDB has enabled us to write such tests. We use the
			<a href="http://www.springsource.org">Spring framework</a> to setup the test
			environment and provide the test data. In this tutorial I'll explain
			how you set up such automated integration test.
		</p>

		<subsection name="Setting up the data" />
		<p>The data for the automated integration tests is provided by</p>
		<ul>
			<li>a .sql file that contains the schema (DDL);</li>
			<li>a .sql file that contains inserts statments for all the records
				(DML).</li>
		</ul>

		<p>These data files should be stored somewhere on your classpath (I
			prefer the resources directory for storage).</p>

		<p>
			The SQL statements should follow the <a href="http://www.h2database.com/html/grammar.html">h2 SQL
			syntax</a>. Table and column
			names are case-insensitive and geometry must be stored as a blob[<a href="fn1">1</a>].
		</p>

		<subsection name="Setting up the Spring configuration" />

		<p>Spring provides integration testing via the spring-test package.
			Since we want to use Hibernate and a database we'll also use the spring-orm
			package and the spring-tx package for transactions (the database
			state should be rolled back after each test method). If you use Maven
			it's sufficient to specifiy only the spring-orm package:</p>
		<source>
		<![CDATA[
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>3.0.2.RELEASE</version>
			<scope>test</scope>
		</dependency>
		]]>
		</source>

		<p>
			In the application context file you need to specify a DataSource, a
			Hibernate SessionFactory and a TransactionManager. If you prefer, you can also
			specify your DAO classes and let them use the specified DataSource.
			The DataSource is created with a special class, the
			GeoDBTestDataSourceFactory[<a href="fn2">2</a>]. 
			This class implements the FactoryBean interface and sets up a
			GeoDB in-memory database, creates a schema (based on the specified
			file), inserts data (using the specified file) and returns a
			DataSource object that points towards the GeoDB database. This way
			it's extremely easy to use GeoDB for testing, because all you need is
			the library on your classpath and two .sql files with the necessary
			SQL statements.
		</p>

		<subsection name="The Spring application context will look as follows:" />

		<source>
		<![CDATA[
		<?xml version="1.0" encoding="UTF-8"?>
		<beans xmlns="http://www.springframework.org/schema/beans"
			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			xmlns:tx="http://www.springframework.org/schema/tx"
			xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
				http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

			<!-- Creates an in-memory "geodata" database populated with test data for fast testing -->
			<bean id="dataSource" class="com.geodan.util.test.GeoDBTestDataSourceFactory">
				<property name="testDatabaseName" value="geodata" />
				<property name="schemaLocation" value="classpath:schema.sql" />
				<property name="testDataLocation" value="classpath:data.sql" />
			</bean>
			
			<!-- Creates a Hibernate SessionFactory -->
			<bean id="sessionFactory"
				class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
				<property name="dataSource" ref="dataSource" />
				<property name="hibernateProperties">
					<value>
						hibernate.dialect=org.hibernatespatial.geodb.GeoDBDialect
						hibernate.show_sql=true
						hibernate.format_sql=true			
						hibernate.generate_statistics=true
					</value>
				</property>
				<property name="annotatedClasses">
					<util:list>
						<value>package.Entity</value>
					</util>
				</property>
			</bean>

			<!-- Creates a Hibernate Transaction Manager -->
			<bean id="transactionManager"
				class="org.springframework.orm.hibernate3.HibernateTransactionManager">
				<constructor-arg ref="sessionFactory" />
			</bean>

		 	<tx:annotation-driven/>
		</beans>
		]]>
		</source>

		<subsection name="The JUnit test class" />

		<p>
			The JUnit test class is quite simple and is tested only on JUnit 4.4
			or higher[<a href="fn3">3</a>]. The most important part is the configuration of the Spring test
			runner, a special class that is used to use a Spring configuration
			with a JUnit test. All methods should be annotated with @Test. There
			should be one private property that holds the Hibernate's SessionFactory.
		</p>

		<subsection name="The class structure look as follows:" />

		<source>
		<![CDATA[
		@Transactional
		@RunWith(SpringJUnit4ClassRunner.class)
		@ContextConfiguration(locations = { "classpath:/geodb-test-context.xml" })
		class GeoDBTest {
			@Resource
			private SessionFactory sessionFactory;

			@Test
			public void testSpatialQuery() {
				Geometry polygon = new WKTReader(new GeometryFactory(new PrecisionModel(), 4326))
						.read("POLYGON((5.5 52.0, 6.0 52.0, 6.0 53.0, 5.5 53.0, 5.5 52.0))");
				Criteria testCriteria = sessionFactory.openSession().createCriteria(package.Entity.class);
        		testCriteria.add(SpatialRestrictions.within("geom", polygon));
        		List<package.Entity> results = testCriteria.list();

				// Assertions go here...
			}
		}
		]]>
		</source>

		<p>Note that I haven't specified the Entity, but it is presumed that the field "geom"
		contains the spatial data and is represented by a Geometry type in the entity class.</p>

		<p>
			<a name="fn1">1.</a>
			If you like to test DAO classes that communicate with PostGIS tables,
			you can use the following SQL query to make the GeoDB SQL syntax
			compatible with: @CREATE DOMAIN geometry AS BLOB;@
		</p>

		<p>
			<a name="fn2">2.</a>
			This class can be found in my <a href="http://github.com/boonen/GeoDBTestDataSourceFactory">github
			repository</a>.
		</p>

		<p>
			<a name="fn3">3.</a>
			If you use Spring 2.5.x, you have to use JUnit 4.4, otherwise the
			spring-test package will fail. Spring 3.x can be used with the latest
			JUnit version without known problems.
		</p>

        </section>
	</body>
</document>